# if cross-compiling from nixos, patch the binary with
# patchelf --set-interpreter /usr/lib64/ld-linux-x86-64.so.2 haemolacriaa

[package]
name = "haemolacriaa"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
console_error_panic_hook = "0.1"
leptos = { version = "0.7" }
leptos_meta = { version = "0.7.0" }
leptos_router = { version = "0.7" }
thiserror = "2"
serde = "1.0.197"
chrono = { version = "0.4.38", features = ["serde"] }
serde_json = { version = "1.0.120", features = ["std"] }
once_cell = "1.19.0"
server_fn = { version = "0.7", features = ["multipart"] }
leptos_icons = "0.4.0"
icondata = "0.5.0"

# frontend only
web-sys = { version = "0.3.70", features = ["Storage"], optional = true }
wasm-bindgen = { version = "=0.2.99", optional = true }
js-sys = { version = "0.3.76", optional = true }

# compile time
const_format = "0.2.32"
cfg-if = "1.0.0"

# server only
http = { version = "1", optional = true }
axum = { version = "0.7", features = [], optional = true }
leptos_axum = { version = "0.7", optional = true }
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.5", features = ["util"], optional = true }
tower-http = { version = "0.6", features = ["compression-gzip", "cors", "timeout", "trace"], optional = true }
headers = { version = "0.4.0", optional = true }
sqlx = { version = "0.8.0", features = ["runtime-tokio", "postgres", "tls-rustls", "chrono"], optional = true }
cookie = { version ="0.18.1", optional = true }
time = { version = "0.3.36", optional = true }
jsonwebtoken = { version = "9.3.0", optional = true }
tracing-subscriber = { version = "0.3.19", optional = true }
tracing = { version = "0.1.41", optional = true }

[build-dependencies]
image = { version = "0.25.5" }
sha256 = { version = "1.5.0" }
webp = { version = "0.3.0" }

[features]
# for encoding jwts
# encode = []
hydrate = [
	"dep:js-sys",
	"dep:web-sys",
	"dep:wasm-bindgen",
	"leptos/hydrate",
]
ssr = [
  "dep:http",
  "dep:axum",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "dep:cookie",
  "dep:headers",
  "dep:leptos_axum",
  "dep:time",
  "dep:sqlx",
  "dep:jsonwebtoken",
  "dep:tracing",
  "dep:tracing-subscriber",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
]

# size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
# test both on release build
# opt-level = 's'
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
output-name = "haemolacriaa"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
site-pkg-dir = "pkg"
# tailwind css
tailwind-input-file = "style/tailwind.css"
# style-file = "style/main.css"
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "PROD"
bin-features = ["ssr"]
bin-default-features = false
lib-features = ["hydrate"]
lib-default-features = false
lib-profile-release = "wasm-release"
